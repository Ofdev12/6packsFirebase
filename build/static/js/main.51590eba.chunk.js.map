{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["process","REACT_APP_API_KEY","REACT_APP_PROJECT_ID","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","settings","timestampsInSnapshots","App","state","inputValue","todos","handleSubmit","e","preventDefault","todo","value","_this","quantity","archived","collection","doc","set","setState","handleChange","target","_this2","this","unsubscribe","onSnapshot","snapshot","forEach","push","data","react_default","a","createElement","className","onSubmit","type","onChange","map","i","key","onClick","update","delete","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAMeA,8CAAYC,kBACTD,8CAAYE,qBAU9BC,IAASC,cARI,CACTC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,iBAIvB,IAAMC,EAAKR,IAASS,YACpBD,EAAGE,SAAS,CAAEC,uBAAuB,QAwEtBC,6MApEbC,MAAQ,CACNC,WAAY,GACZC,MAAO,MAGTC,aAAe,SAAAC,GACbA,EAAEC,iBAEF,IAAMC,EAAO,CACXC,MAAOC,EAAKR,MAAMC,WAClBQ,SAAU,EACVC,UAAU,GAGZf,EAAGgB,WAAW,SAASC,IAAIN,EAAKC,OAAOM,IAAIP,GAC3CF,EAAEC,iBACFG,EAAKM,SAAS,CAAEb,WAAY,QAG9Bc,aAAe,SAAAX,GACbI,EAAKM,SAAS,CAAEb,WAAYG,EAAEY,OAAOT,4FAInB,IAAAU,EAAAC,KAElBA,KAAKC,YAAcxB,EAAGgB,WAAW,SAC9BS,WAAW,SAAAC,GACV,IAAMnB,EAAQ,GACdmB,EAASC,QAAQ,SAAAV,GAAG,OAAIV,EAAMqB,KAAKX,EAAIY,UAEvCP,EAAKH,SAAS,CAAEZ,2DAKpBgB,KAAKC,+CAIL,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAMC,UAAU,SACdH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,QAAME,SAAUX,KAAKf,cACnBsB,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOvB,MAAOW,KAAKlB,MAAMC,WAAY8B,SAAUb,KAAKH,eAChEU,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASvB,MAAM,UAG/BkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXV,KAAKlB,MAAME,MAAM8B,IAAI,SAAC1B,EAAM2B,GAAP,OACrBR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,GACPR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,SAAA/B,GAAC,OAAIT,EAAGgB,WAAW,SAASC,IAAIN,EAAKC,OAAO6B,OAAO,CAAE3B,SAAUH,EAAKG,SAAW,MAAhG,KACAgB,EAAAC,EAAAC,cAAA,iBAASrB,EAAKG,SAAd,MACAgB,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,SAAA/B,GAAC,OAAIT,EAAGgB,WAAW,SAASC,IAAIN,EAAKC,OAAO6B,OAAO,CAAE3B,SAAUH,EAAKG,SAAW,MAAhG,KACAgB,EAAAC,EAAAC,cAAA,QAAMC,UAAYtB,EAAKI,SAAW,WAAa,GAAKyB,QAAS,SAAA/B,GAAC,OAAIT,EAAGgB,WAAW,SAASC,IAAIN,EAAKC,OAAO6B,OAAO,CAAE1B,UAAYJ,EAAKI,aAAnI,IAAkJJ,EAAKC,MAAvJ,KACAkB,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,SAAA/B,GAAC,OAAIT,EAAGgB,WAAW,SAASC,IAAIN,EAAKC,OAAO8B,WAA7D,mBA5DAC,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.51590eba.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport \"./app.css\"\n\nconst apiKey = process.env.REACT_APP_API_KEY || \"AIzaSyA0d-9Xa0sIbn75OdH8EfKg2m_RxSVJORg\"\nconst projectId = process.env.REACT_APP_PROJECT_ID || \"todos-c769e\"\n\nvar config = {\n    apiKey: \"AIzaSyBgjQ-aMPoMk4y802oM57HUwAFSEBBlk10\",\n    authDomain: \"yo-todo-d1229.firebaseapp.com\",\n    databaseURL: \"https://yo-todo-d1229.firebaseio.com\",\n    projectId: \"yo-todo-d1229\",\n    storageBucket: \"yo-todo-d1229.appspot.com\",\n    messagingSenderId: \"471773751736\"\n  };\nfirebase.initializeApp(config)\n\nconst db = firebase.firestore()\ndb.settings({ timestampsInSnapshots: true })\n\nclass App extends Component {\n\n  state = {\n    inputValue: '',\n    todos: []\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n\n    const todo = {\n      value: this.state.inputValue,\n      quantity: 1,\n      archived: false\n    }\n\n    db.collection('todos').doc(todo.value).set(todo)\n    e.preventDefault()\n    this.setState({ inputValue: ''})\n  }\n\n  handleChange = e => {\n    this.setState({ inputValue: e.target.value })\n  }\n\n\n  componentDidMount() {\n    // update state when 'todos' collection changes\n    this.unsubscribe = db.collection('todos')\n      .onSnapshot(snapshot => {\n        const todos = []\n        snapshot.forEach(doc => todos.push(doc.data()))\n\n        this.setState({ todos })\n      })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"shop\">\n          <div  className=\"block\">\n            <h2>Shopping list</h2>\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n              <input type=\"submit\" value=\"add\" />\n            </form>\n          </div>  \n          <div className=\"block\">\n            { this.state.todos.map((todo, i) =>\n              <ul key={i}>\n                <li>\n                  <button onClick={e => db.collection('todos').doc(todo.value).update({ quantity: todo.quantity - 1 })}>-</button>\n                  <span>( {todo.quantity} )</span>\n                  <button onClick={e => db.collection('todos').doc(todo.value).update({ quantity: todo.quantity + 1 })}>+</button>\n                  <span className={ todo.archived ? \"archived\" : \"\" } onClick={e => db.collection('todos').doc(todo.value).update({ archived : !todo.archived })}> {todo.value} </span>\n                  <button onClick={e => db.collection('todos').doc(todo.value).delete()}>x</button>\n                </li>\n              </ul>) }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}